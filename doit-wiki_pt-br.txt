Iniciando com DoIt

DoIt é uma biblioteca que permite validar e executar expressões simples, de forma fácil e prática.
A representação destas expressões, nada mais são do que simples classes Java, que devem seguir algumas regras básicas.
Por exemplo, vamos criar a expressão abaixo:

google traduzir de 'en' para 'pt-br' : hey! Doit is working!

Para executar a expressão acima, é necessário a seguinte classe java:

public class Google implements CallableExpression {

	private String de = null;
	private String para = null;

	public Google traduzir() { return this; }
	public Google de(String de) { this.de = de; return this; }
	public Google para(String para) { this.para = para; return this; }

	public Result doIt() {
		String texto = getAssign();  //aqui pegamos o texto após o ":"
		//chama a api do google com os parametros ...
		String textoTraduzido = ...
		return new TextResult(textoTraduzido);
	}

	public String getAssign() { }
	public void setAssign(String assign) { }

	public DoItSession getSession() { }
	public void setSession(DoItSession session) { }

}

Por último e não menos importante, temos que informar a lib qual a ordem válida dos comandos.
Hoje, isto é feito através de annotations.

@RootCmd(cmds={"traduzir"})
@Cmds {
  @Cmd(name="traduzir", innerCmds={"de"})
  @Cmd(name="de", innerCmds={"para"})
}
public class Google ...

Agora que temos nossa expressão implementada, devemos "empacotá-la", para carregar na lib.

public class GooglePack implements ExpressionPack {

	public Class<?>[] getExpressions() {
		return return new Class<?>[] {Google.class};
	}

	public String getName() { return "GooglePack"; }

}

Pronto! Finalmente podemos chamar o DoIt para executar a nossa nova expressão:

DoItSession session = new DoIt().createSession();
session.load(new GooglePack());

CallableExpression ce = session.parse("google traduzir de 'en' para 'pt-br' : hey! Doit is working!");
Result result = ce.doIt();

System.out.println(result.textValue());


